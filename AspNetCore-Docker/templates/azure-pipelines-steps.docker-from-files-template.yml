# Steps of building Docker from artifacts
# Uses the flat file output of an ASP.NET Core build and creates a docker image
parameters:
  artifactsTargetFolder: '_artifacts/dockercontents'
  dockerUserName: ''
  dockerRepositoryName: ''
  dockerImageName: ''
  dockerFile: ''
  dockerFileFolder: $(System.DefaultWorkingDirectory)
  dockerContents: ''

steps:

- task: DownloadBuildArtifacts@0
  displayName: "Download artifacts"
  inputs:
    artifactName: drop

- task: CopyFiles@2
  displayName: "Copy files from artifacts"
  inputs:
    SourceFolder: ${{ parameters.dockerContents }}
    TargetFolder: ${{ parameters.artifactsTargetFolder }}

- script: |
    docker info
  displayName: Docker Info

- script: |
    docker build -t ${{ parameters.dockerRepositoryName }}/${{ parameters.dockerUserName }}/${{ parameters.dockerImageName }}:$(Build.BuildId) -f ${{ parameters.dockerFile }} ${{ parameters.dockerFileFolder }}
  displayName: Docker Image Build

- powershell: New-Item -Path "$(Build.ArtifactStagingDirectory)/dockeroutput/docker" -ItemType Directory -Force | out-null
  displayName: "Create Docker Image Save Folder"

- script: |
    docker save --output $(Build.ArtifactStagingDirectory)/dockeroutput/docker/${{ parameters.dockerRepositoryName }}-${{ parameters.dockerUserName }}-${{ parameters.dockerImageName }}-$(Build.BuildId).tar.gz ${{ parameters.dockerRepositoryName }}/${{ parameters.dockerUserName }}/${{ parameters.dockerImageName }}:$(Build.BuildId)
  displayName: Docker Image Save Locally

- task: PublishBuildArtifacts@1
  displayName: "Publish Docker Image artifacts"
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/dockeroutput'
    ArtifactName: drop
